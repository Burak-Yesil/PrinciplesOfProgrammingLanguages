
(* Find exercise  *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; size <= 3} 

in letrec find_bt_helper (node) = proc (x) { 
    if (node.data = x)
        then zero?(0)
    else if zero?(node.data)
        then zero?(1)
    else if number?(node.right)
        then if number?(node.left)
            then zero?(1)
            else ((find_bt_helper node.left) x)
    else if number?(node.left)
        then if number?(node.right)
            then zero?(1)
            else ((find_bt_helper node.right) x)
    else if ((find_bt_helper node.right) x)
        then zero?(0)
    else if ((find_bt_helper node.left) x)
        then zero?(0)
    else zero?(1)
}

in let find_bt = proc (t) { proc (x) { ((find_bt_helper t.root) x) }}

in ((find_bt t1) 12)
